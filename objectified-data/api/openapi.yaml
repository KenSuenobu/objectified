openapi: 3.1.0
info:
  title: Objectified API
  version: '0.0.1'
  description: |
    Objectified is a **time-series object database that supports dynamic schemas**.
    
    This API specification defines a RESTful services specification for Objectified.  Requests made
    to this server can only be made using the `application/json` content type.  No other content
    types are allowed.
  contact:
    name: Objectified Project
    url: https://www.github.com/KenSuenobu/objectified
    email: ksuenobu@fastmail.com
servers:
  - url: 'http://localhost:8080/v1'
schemes:
  - http
  - https
tags:
  - name: Authentication
    description: Authentication services for login and logout.
  - name: Users
    description: Services for User accounts.
  - name: Namespaces
    description: |
      Namespaces are names that are used to organize groups of classes, objects, fields, and
      so on.  They are used to prevent name collisions that can occur when multiple organizations may 
      use similar names to describe different object definitions.

      A namespace ensures that all of a given set of objects have unique names so that they may
      easily be identified and separated under a common group.

      For instance, one namespace's definition of a `User` may differ from another namespace's `User`.
      Same with a `Car` or a `Bike`.
      
      A system namespace is a core namespace that is used by Objectified internally.  These namespaces
      cannot be altered, but they can be referred to in other namespaces, should you choose to import
      them directly into your namespace.
      
      Services require a JWT authentication token to be active for services to respond to requests.
      If authentication is missing, a `401 Unauthorized` response will occur.
  - name: Classes
    description: |
      Classes are templates that define the shape of data that can be contained in a record.  For more
      information on best practices on creating and updating classes, please 
      [refer to this documentation](https://www.objectified.wiki/wiki/classes-best-practices)
      for more detailed information.
  - name: DataTypes
    description: |
      Data types describe the types of data that can be stored in fields in Objectified.
      
      Data types can contain arrays of data, enumerations, regular expressions, and much more.
      
      Core data types cannot be modified or removed, as they are considered core to the Objectified
      system.  Data types are specific to ownership in their namespace.  Core data types are available
      system-wide.
      
      The most common usage for Data Types outside of the core data types is in defining custom
      enumeration values.  Other data types like custom filters and regular expressions can be
      created, but these occasions are generally rare.
      
      Please
      [refer to this documentation](https://www.objectified.wiki/wiki/data-types-best-practices)
      for more detailed on best practices regarding field definitions.
  - name: Fields
    description: |
      Fields are storage objects that utilize a data type definition.
      
      Fields define the types of data that a class property can contain.  Fields can be reused.
      Fields are not indexed, whereas properties can be.
      
      Please
      [refer to this documentation](https://www.objectified.wiki/wiki/fields-best-practices)
      for more detailed on best practices regarding field definitions.
  - name: Properties
    description: |
      Properties are member variables that are used by classes to store data defined by a
      field.
      
      Properties extend fields by adding items such as nullability, default values, required
      flags, indexing, and so on.  Properties can also be objects that implement other properties.
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Performs a login
      operationId: login
      description: Logs a user into the system by their username and password.
      requestBody:
        description: The user credentials with which to login.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username to use.
                password:
                  type: string
                  description: The base64 encoded password.
      responses:
        '200':
          description: OK, returns the JWT session token that must be stored.
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /auth/logout:
    get:
      tags:
        - Authentication
      summary: Performs a logout
      operationId: logout
      description: Logs a user out of the system
      security:
        - bearerAuth: []
      responses:
        '204':
          description: No content
  /namespaces/list:
    get:
      tags:
        - Namespaces
      summary: Returns a list of all namespaces.
      operationId: listNamespaces
      description: Returns a list of all namespaces registered in Objectified, regardless of enabled flag status.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: An array of namespaces registered in Objectified.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Namespace'
        '401':
          description: Unauthorized
  /namespaces/{id}:
    get:
      tags:
        - Namespaces
      summary: Retrieves a namespace by ID.
      operationId: getNamespace
      description: Gets a namespace by its serial ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the namespace to retrieve.
      responses:
        '200':
          description: OK, returns the `Namespace` object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
  /namespaces/create:
    post:
      tags:
        - Namespaces
      summary: Creates a new namespace.
      operationId: createNamespace
      description: Creates a new namespace.
      security:
        - bearerAuth: []
      requestBody:
        description: The namespace object to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Namespace'
      responses:
        '201':
          description: Created successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Conflict
  /namespaces/edit:
    patch:
      tags:
        - Namespaces
      summary: Edit a namespace.
      operationId: patchNamespace
      description: Applies changes to a namespace, only changing the values supplied in the request body.
      security:
        - bearerAuth: []
      requestBody:
        description: The namespace changes to apply.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Namespace'
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '409':
          description: Conflict
  /namespaces/delete/{id}:
    delete:
      tags:
        - Namespaces
      summary: Deletes (disables) a namespace.
      operationId: disableNamespace
      description: Disables a namespace.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the namespace to disable.
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
  /namespaces/undelete/{id}:
    put:
      tags:
        - Namespaces
      summary: Undeletes (enables) a namespace.
      operationId: enableNamespace
      description: (Re)Enables a namespace.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the namespace to enable.
      responses:
        '200':
          description: OK, returns the `Namespace` object after undeletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
  /users/list:
    get:
      tags:
        - Users
      summary: Returns a list of all users.
      operationId: listNamespaces
      description: |
        Returns a list of all users registered in Objectified, regardless of enabled flag status.  Only users with
        administrative privileges may list users.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: An array of users registered in Objectified.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /users/create:
    post:
      tags:
        - Users
      summary: Creates a new user.
      operationId: createUser
      description: Creates a new `User` record in the Objectified platform.
      security:
        - bearerAuth: []
      requestBody:
        description: The `User` object to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Conflict
  /users/verify/{key}:
    get:
      tags:
        - Users
      summary: Verifies a user.
      operationId: verifyUser
      description: Validates a user's email address through a key they received in an email message.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: key
          required: true
          schema:
            type: string
          description: The encoded key that was sent in the email.
      responses:
        '200':
          description: OK
        '404':
          description: Token invalid
        '500':
          description: Request to validate timed out
  /users/delete/{id}:
    delete:
      tags:
        - Users
      summary: Deletes (disables) a user.
      operationId: disableUser
      description: Disables a user.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the user to disable.
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
  /users/undelete/{id}:
    put:
      tags:
        - Users
      summary: Undeletes (enables) a user.
      operationId: enableUser
      description: (Re)Enables a user.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the user to enable.
      responses:
        '200':
          description: OK, returns the `User` object after undeletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
  /users/edit:
    patch:
      tags:
        - Users
      summary: Edit a user.
      operationId: editUser
      description: |
        Applies changes to a user, only changing the values supplied in the request body.
        Only administrators may make changes to user records that do not belong to them.
      security:
        - bearerAuth: []
      requestBody:
        description: The user changes to apply.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '409':
          description: Conflict
  /classes/list/{namespaceId}:
    get:
      tags:
        - Classes
      summary: Returns a list of classes by namespace.
      operationId: listClasses
      description: Returns a list of all classes registered in the given namespace ID, regardless of enabled flag status.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: namespaceId
          required: true
          schema:
            type: integer
          description: The ID of the namespace.
      responses:
        '200':
          description: An array of classes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        '401':
          description: Unauthorized
  /classes/create:
    post:
      tags:
        - Classes
      summary: Creates a new class.
      operationId: createClass
      description: Creates a new class.
      security:
        - bearerAuth: []
      requestBody:
        description: The class object to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        '201':
          description: Created successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Conflict
  /classes/delete/{id}:
    delete:
      tags:
        - Classes
      summary: Deletes (disables) a class.
      operationId: disableClass
      description: Disables a class.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the class to disable.
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
  /classes/undelete/{id}:
    put:
      tags:
        - Classes
      summary: Undeletes (enables) a class.
      operationId: enableClass
      description: (Re)Enables a class.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the class to enable.
      responses:
        '200':
          description: OK, returns the `Class` object after undeletion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
  /classes/edit:
    patch:
      tags:
        - Classes
      summary: Edit a class.
      operationId: editClass
      description: Applies changes to a class, only changing the values supplied in the request body.
      security:
        - bearerAuth: []
      requestBody:
        description: The class changes to apply.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not found
        '409':
          description: Conflict
components:
  securitySchemes:
    bearerAuth:
      type: http
      description: JWT Authorization header using Bearer scheme.
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Namespace:
      type: object
      required:
        - name
        - description
      properties:
        id:
          type: integer
          description: The numerical ID of the namespace.  (Auto-numbering, ignored on create.)
        creatorId:
          type: integer
          description: The numerical ID of the user ID that created this object.  This is pulled from the session, and cannot be modified by any services.  Values supplied to this field at creation or edit time will be ignored.
        name:
          type: string
          maxLength: 80
          description: A simple identifying name of the namespace following pattern `A-Za-z0-9`, should be camel-case.
          pattern: '^[A-Za-z0-9]*$'
        description:
          type: string
          maxLength: 4096
          description: The description of the namespace.
        enabled:
          type: boolean
          description: An enabled flag - `true` indicates the namespace is active, `false` otherwise.  System namespaces cannot be deactivated.
          default: true
        systemNamespace:
          type: boolean
          description: Indicates whether or not this is a system-level namespace belonging to Objectified.
          default: false
        createDate:
          type: string
          format: date-time
          description: Creation date and time.  Auto-filled, not required.
    User:
      type: object
      required:
        - username
        - password
        - emailAddress
      properties:
        id:
          type: integer
          description: The numerical ID of the user.  (Auto-numbering, ignored on create.)
        username:
          type: string
          maxLength: 80
          description: Username
          pattern: '^[A-Za-z0-9]*$'
        password:
          type: string
          maxLength: 255
          description: Password of any type
        emailAddress:
          type: string
          maxLength: 255
          format: email
          description: Valid e-mail address for the user
        verified:
          type: boolean
          description: Indicates whether or not the user record has verified their e-mail address.
          default: false
        enabled:
          type: boolean
          description: An enabled flag - `true` indicates the ujser is active, `false` otherwise.
          default: true
        data:
          type: object
          description: A JSON payload that describes more information about the user in a freeform manner.
    Class:
      type: object
      required:
        - namespaceId
        - ownerId
        - name
        - description
      properties:
        id:
          type: integer
          description: The numerical ID of the class.  (Auto-numbering, ignored on create.)
        namespaceId:
          type: integer
          description: The numerical ID of the namespace to which this class belongs.
        ownerId:
          type: integer
          description: The numerical ID of the user that created this class definition.
        name:
          type: string
          description: Alphanumeric common name of the class, cannot start with a number.
          maxLength: 80
          pattern: '^[A-Za-z][A-Za-z0-9]*$'
        description:
          type: string
          description: A short description describing the class.
          maxLength: 4096
        enabled:
          type: boolean
          description: An enabled flag - `true` indicates the class is active, `false` otherwise.
        createDate:
          type: string
          format: date-time
          description: Creation date and time.  Ignored if supplied, handled by the service.
        updateDate:
          type: string
          format: date-time
          description: Update date and time.  Ignored if supplied, handled by the service.
        deleteDate:
          type: string
          format: date-time
          description: Deletion date and time.  Ignored if supplied, handled by the service.
    Property:
      type: object
      required:
        - namespaceId
        - name
        - description
        - fieldId
      properties:
        id:
          type: integer
          description: The numerical ID of the property.  (Auto-numbering, ignored on create.)
        namespaceId:
          type: integer
          description: The numerical ID of the namespace to which this property belongs.
        name:
          type: string
          description: Alphanumeric common name of the property, cannot start with a number.
          maxLength: 80
          pattern: '^[A-Za-z][A-Za-z0-9]*$'
        description:
          type: string
          description: A short description describing the property.
        fieldId:
          type: integer
          description: The numerical ID of the field to which this property is assigned.
        required:
          type: boolean
          description: Boolean flag indicating whether or not this property requires a value.
          default: false
        nullable:
          type: boolean
          description: Boolean flag indicating whether or not this poperty is nullable.
          default: false
        isArray:
          type: boolean
          description: Boolean flag indicating if this value expects an array of field data types.
          default: false
        defaultValue:
          type: string
          description: The default value of this property if not value is assigned.
        enabled:
          type: boolean
          description: An enabled flag - `true` indicates the property is active, `false` otherwise.
          default: true
        indexed:
          type: boolean
          description: Indicates whether or not the value of this property should be included for indexing in Objectified.
        createDate:
          type: string
          format: date-time
          description: Creation date and time.  Ignored if supplied, handled by the service.
        updateDate:
          type: string
          format: date-time
          description: Update date and time.  Ignored if supplied, handled by the service.
        deleteDate:
          type: string
          format: date-time
          description: Deletion date and time.  Ignored if supplied, handled by the service.
